[project]
name = "pompompurin-ai-toolkit"
version = "1.0.0"
description = "🍮 PompomPurin's AI Engineering Toolkit - Sweet AI-assisted development with PRP methodology"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "sqlalchemy>=2.0.23",
    "pydantic>=2.5.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "httpx>=0.25.2",
    "pytest-cov>=4.1.0"
]

[project.urls]
Homepage = "https://github.com/888Greys/pompompurin-ai-toolkit"
Repository = "https://github.com/888Greys/pompompurin-ai-toolkit"
Issues = "https://github.com/888Greys/pompompurin-ai-toolkit/issues"
Documentation = "https://github.com/888Greys/pompompurin-ai-toolkit#readme"

[project.optional-dependencies]
# Modern development stack - optimized for speed and efficiency
dev = [
    "ruff>=0.1.0",           # All-in-one linter/formatter (replaces black, isort, flake8)
    "mypy>=1.7.0",          # Type checking
    "pre-commit>=3.5.0",    # Git hooks
    "pytest-xdist>=3.5.0",  # Parallel test execution
    "testcontainers>=3.7.0", # Integration testing with real services
    "hypothesis>=6.92.0",    # Property-based testing
    "sentry-sdk>=1.40.0",    # Error tracking and performance monitoring
]

# Container and orchestration tools
container = [
    "docker>=6.1.0",        # Docker SDK for Python
    "docker-compose>=1.29.0", # Docker Compose
]

# Monitoring and observability
monitoring = [
    "prometheus-client>=0.19.0", # Metrics collection
    "opentelemetry-api>=1.21.0", # Distributed tracing
    "structlog>=23.2.0",     # Structured logging
]

# All development dependencies
all = [
    "pompompurin-ai-toolkit[dev,container,monitoring]"
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# Ruff configuration - replaces black, isort, flake8, pylint
[tool.ruff]
line-length = 88
target-version = "py312"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.isort]
known-first-party = ["app", "tests"]

# MyPy configuration
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests", "task-api/tests"]
python_files = ["test_*.py", "*_test.py"]
addopts = "-v --cov=app --cov-report=term-missing --cov-report=html"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]