# Modern Dockerfile with UV, Micromamba, and BuildKit optimizations
# syntax=docker/dockerfile:1.4

# Why micromamba? It's minimal (90% smaller than conda), fast startup, no bloat
# Strategy: mamba for local dev (full features), micromamba for containers (minimal size)
FROM mambaorg/micromamba:1.5.1 as base

# Set environment variables for optimal performance
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install UV for blazing fast package management
# Micromamba + UV = fastest possible Python environment setup
RUN micromamba install -y -n base -c conda-forge python=3.12 && \
    micromamba clean --all --yes && \
    pip install uv

# Development stage
FROM base as development

WORKDIR /app

# Copy dependency files first for better caching
COPY requirements.txt pyproject.toml ./

# Install dependencies with UV (10-100x faster than pip)
RUN --mount=type=cache,target=/root/.cache/uv \
    uv pip install --system -r requirements.txt

# Install development dependencies
RUN --mount=type=cache,target=/root/.cache/uv \
    uv pip install --system -e ".[dev]"

# Copy source code
COPY . .

# Development server
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

# Production stage
FROM base as production

WORKDIR /app

# Copy only production requirements
COPY requirements.txt pyproject.toml ./

# Install only production dependencies
RUN --mount=type=cache,target=/root/.cache/uv \
    uv pip install --system --no-dev -r requirements.txt

# Create non-root user for security
RUN useradd --create-home --shell /bin/bash app
USER app

# Copy source code
COPY --chown=app:app . .

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Production server
EXPOSE 8000
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]

# Testing stage
FROM development as testing

# Run tests
RUN pytest tests/ -v --cov=app --cov-report=term-missing

# Linting stage
FROM development as linting

# Run linting and formatting checks
RUN ruff check . && \
    ruff format --check . && \
    mypy app/

# Size comparison:
# conda/mamba base image: ~1.2GB
# micromamba base image: ~120MB (90% smaller!)
# Result: Faster builds, smaller images, quicker deployments